MY INTERVIEW QUESTIONS
----------------------
1. There is a webpage. I wanna make every single text that i see on page,editable. How?
document.body.contentEditable = true;

2. How to make a triangle with plain css?
By setting border with different colors to a div and setting div height n width to 0.

3. Whats the ouput of 
function foo(nm) {
	this.name = "Abid"
	return .....
}

JS puts semicolon at the end of statement even if u forget

4. Whats IFFY and wer its used?
IIFE

5. How do we pass arguments to a callback function?
var callbk = function(A) {
	return function() {
		alert('hii'+A);
	}
somefunc(1, 2, callbk(3))

6. What are template strings?
`This is a template string ${name}`

7. 

callsomefunc(callbk)
}


8. whats the output of the following : 
	function(y) {
		console.log(this.length);
	}
	var x = {
		length : 5;
		method: function(y) {
			arguments[0]();
		}
	};
	x.method(y, 1)
Ans : 2 (Arguments Objectlength is 2)


9. Difference between let and var
let wont get hoisted

10. is it pass by value or pass by ref in js?
var a = 10;
let changeval = function(val) {
	val = 20;
}
changeval(a);
console.log(a); 
The above example is also pass by reference. 
Rule : Primitive values (numbers, strings etc) cannot be mutated (obj.name = "new name" is a mutating exampple..basically modifiyin existing values of an obj or arr..).
And if sumthin cannot b mutated, a new value assigned to a primitive value will generate a new address in memory.
If it can b mutated, it is actually pointing to the same reference. hence pass by reference.
val = 20; is actually creating new reference n not pointing to the same reference.so a copy is created.
changeval({name:"Abid"}) n if 
let changeval = function(val) {
	val = {}; //this is not mutation.so wil create another new reference
}
this wil also log same old {name:"Abid"}. coz in function, v r not mutating but creating another reference by initializing.

10. call, apply, bind (borrow functionalities from other object. multiple inheritance can be made possible with this)
	apply uses array as an argument
	Math.min.apply(null, [1,2,3]); //rem min cannot be applied on an array. but this is made possible here

11. difference between Object.create and new operator
	Former wont call constructor but latter does


12. write a simple closure
var a = 10;
var add = function() {
return a+1;
}
add(); //is d simplest closure..verify by console.dir(add)

